
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.awt.print.*;
import java.util.*;
import javax.swing.undo.*;
import javax.swing.filechooser.FileFilter;

/**
* Handles the menu actions of Execution menu in the application
*/

public class ExecutionMenuAction extends AbstractAction {
    protected LC frame;

    public ExecutionMenuAction(String name, Icon icon, String descrip,
    Integer mnemonic, KeyStroke accel, LC gui) {
        super(name, icon);
        putValue(SHORT_DESCRIPTION, descrip);
        putValue(MNEMONIC_KEY, mnemonic);
        putValue(ACCELERATOR_KEY, accel);
        frame = gui;
    }

    /**
    * implements the actionPerformed method of AbstractAction
    * triggered when an event is generated by any component
    *
    * @param e component triggering this call
    */
    public void actionPerformed(ActionEvent e) {
        if(e.getActionCommand().equals("Slow"))
        executionSlowAction(e);
        if(e.getActionCommand().equals("Medium"))
        executionMediumAction(e);
        if(e.getActionCommand().equals("Fast"))
        executionFastAction(e);
    }


    /**
    * sets the execution speed of micro-instructions to 'slow' mode
    *
    * @param e component triggering this call
    */
    public void executionSlowAction(ActionEvent e) {
        frame.delayTime=1000;
    }

    /**
    * sets the execution speed of micro-instructions to 'medium' mode
    *
    * @param e component triggering this call
    */
    public void executionMediumAction(ActionEvent e) {
        frame.delayTime=100;
    }

    /**
    * sets the execution speed of micro-instructions to 'fast' mode
    *
    * @param e component triggering this call
    */
    public void executionFastAction(ActionEvent e) {
        frame.delayTime=0;
    }
}