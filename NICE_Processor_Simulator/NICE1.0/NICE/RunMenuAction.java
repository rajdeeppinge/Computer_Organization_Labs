
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.awt.print.*;
import java.util.*;
import javax.swing.undo.*;
import javax.swing.filechooser.FileFilter;

/**
* Handles the menu actions of Run menu in the application
*/

public class RunMenuAction extends AbstractAction {
    protected LC frame;
    ExeInst exeInst = new ExeInst();

    public RunMenuAction(String name, Icon icon, String descrip,
    Integer mnemonic, KeyStroke accel, LC gui) {
        super(name, icon);
        putValue(SHORT_DESCRIPTION, descrip);
        putValue(MNEMONIC_KEY, mnemonic);
        putValue(ACCELERATOR_KEY, accel);
        frame = gui;
    }

    /**
    * implements the actionPerformed method of AbstractAction
    * triggered when an event is generated by any component
    *
    * @param e component triggering this call
    */
    public void actionPerformed(ActionEvent e) {
        if(e.getActionCommand().equals("Assemble"))
            assembleAction(e);
        if(e.getActionCommand().equals("Step"))
            runStepAction(e);
        if(e.getActionCommand().equals("Go"))
            runGoAction(e);
        if(e.getActionCommand().equals("Pause"))
            runPauseAction(e);
        if(e.getActionCommand().equals("Change PC"))
            runResumeAction(e);
        if(e.getActionCommand().equals("Reset"))
            runResetAction(e);
    }

    /**
    * Code for actions to be taken when assembly of code is demanded.
    * @param e component triggering this call
    */
    public void assembleAction(ActionEvent e) {
        LC.initialise();
        frame.assAgain();
    }

    /**
    * Code for actions to be taken when step execution of program is demanded.
    *
    * @param e component triggering this call
    */
    public void runStepAction(ActionEvent e) {
        if( !frame.assembleError) {
            exeInst = new ExeInst();    // Execute instruction
            exeInst.controlUnit(true);  // overdiding BP
            frame.BPseen = false;
        }
        if(frame.halt) {
            frame.writeMessage("Processor halted at PC = x"+frame.lastPC+".");
        }
        if(frame.assembleError) {
            frame.writeMessage("Error in assembly - cannot execute.");
        }
    }


    /**
    * Code for actions to be taken when execution of program in one go is demanded.
    *
    * @param e component triggering this call
    */
    public void runGoAction(ActionEvent e) {
        if( !frame.assembleError) {
            frame.writeMessage("Start execution at PC = x"+frame.pc+".");
            frame.runAssemble.setEnabled(false); frame.Assemble.setEnabled(false);
            frame.runResume.setEnabled(false); frame.Resume.setEnabled(false);
            frame.runGo.setEnabled(false); frame.Go.setEnabled(false);
            frame.runStep.setEnabled(false); frame.Step.setEnabled(false);
            frame.runPause.setEnabled(true); frame.Pause.setEnabled(true);
            // Execute one instruction regardless of BP 
            exeInst = new ExeInst();
            exeInst.controlUnit(true);
            frame.BPseen = false;
            if(frame.halt) 
                frame.writeMessage("Processor halted - PC = x"+frame.pc+".");
            // Now run
            Counter counter = new Counter(frame.exeInst);
            counter.start();
        }
    }


    /**
    * Code for actions to be taken when pausing the execution of program is demanded.
    *
    * @param e component triggering this call
    */
    public void runPauseAction(ActionEvent e) {
        frame.runAssemble.setEnabled(true); frame.Assemble.setEnabled(true);
        frame.runResume.setEnabled(true); frame.Resume.setEnabled(true);
        frame.runGo.setEnabled(true); frame.Go.setEnabled(true);
        frame.runStep.setEnabled(true); frame.Step.setEnabled(true);
        frame.runPause.setEnabled(false); frame.Pause.setEnabled(false);
        frame.pause=true;
    }


    /**
    * Code for actions to be taken when resuming of the execution of program is demanded
    *
    * @param e component triggering this call
    */
    public void runResumeAction(ActionEvent e) {
        frame.writeMessage("Changing PC value. Current PC = x"+frame.pc+".");
        String newpc = getNewPC();
        if (newpc!=null) {
            LC.pc = newpc;
            frame.writeMessage("New PC = x"+newpc+".");
            LC.moveHighlight();
        }    
        else
            frame.writeMessage("No change in PC.");
        // frame.runAssemble.setEnabled(false); frame.Assemble.setEnabled(false);
        // frame.runResume.setEnabled(false); frame.Resume.setEnabled(false);
        // frame.runGo.setEnabled(false); frame.Go.setEnabled(false);
        // frame.runStep.setEnabled(false); frame.Step.setEnabled(false);
        // frame.runPause.setEnabled(true); frame.Pause.setEnabled(true);
        // Execute one instruction regardless of BP 
        // exeInst = new ExeInst();
        // exeInst.controlUnit(true);
        // frame.BPseen = false;
        // if(frame.halt) 
        //    frame.writeMessage("Processor halted - PC = x"+frame.pc+".");
        // frame.pause=false;
        // Counter counter = new Counter(frame.exeInst);
        // counter.start();
    }


    /**
    * Code for actions to be taken when machine has to be reset.
    *
    * @param e component triggering this call
    */
    public void runResetAction(ActionEvent e) {
        frame.runAssemble.setEnabled(true); frame.runResume.setEnabled(true);
        frame.runPause.setEnabled(true); frame.runGo.setEnabled(true);
        frame.runStep.setEnabled(true); frame.Assemble.setEnabled(true);
        frame.Resume.setEnabled(true); frame.Pause.setEnabled(true);  
        frame.Go.setEnabled(true); frame.Step.setEnabled(true);
        frame.initialise();
    }

    /*
    * Get new PC value supplied by user 
    */
    public String getNewPC() {
        frame.writeMessage("Reading new PC value.");
        String typedText;
        while (true) {
            Object inputValue = JOptionPane.showInputDialog(null, 
                        "Enter PC -", "PC value or null",
                        JOptionPane.PLAIN_MESSAGE, null, null, null);
	    typedText = (String) inputValue;
	    if (typedText==null) { // null means old PC value
	        typedText=LC.pc;
	        return typedText; 
	    }    
            try {
                int val = Integer.parseInt(typedText,16); 
                if(val>=0 && val<LC.memsize)
                    break;
            } catch(Exception e) {
                frame.writeMessage("Only hex value upto 000FFF.");
                continue;
            }
	}        
        // LC.writeMessage("Read new pc = "+typedText+".");
        typedText = CustTable.pad(typedText,-6,"0"); 
        int len = typedText.length();
        if (len>6)
            typedText = typedText.substring(len-6);
        return typedText;
    }
}